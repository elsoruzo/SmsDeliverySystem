// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;

namespace SmssApi
{
    public partial class SmsDbContext : DbContext
    {
        public SmsDbContext()
        {
        }

        public SmsDbContext(DbContextOptions<SmsDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<RefreshToken> RefreshTokens { get; set; }
        public virtual DbSet<Sms> Smss { get; set; }
        public virtual DbSet<User> Users { get; set; }

		public virtual DbSet<SmsMessage> SmsMessages { get; set; }
		public virtual DbSet<SmsStatus> SmsStatuses { get; set; }

		protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<RefreshToken>(entity =>
            {
               
                entity.Property(e => e.ExpiryDate).HasColumnType("smalldatetime");

                entity.Property(e => e.TokenHash)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.TokenSalt)
                    .IsRequired()
                    .HasMaxLength(1000);

                entity.Property(e => e.Ts)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TS");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.RefreshTokens)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RefreshToken_User");

                entity.ToTable("RefreshToken");
            });

            modelBuilder.Entity<Sms>(entity =>
            {
               
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.Ts)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TS");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Smss)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Sms_User");

                entity.ToTable("Sms");
            });

			modelBuilder.Entity<SmsMessage>(entity =>
			{

				//entity.Property(e => e.Name)
				//	.IsRequired()
				//	.HasMaxLength(100);

				//entity.Property(e => e.Ts)
				//	.HasColumnType("smalldatetime")
				//	.HasColumnName("TS");

				entity.HasOne(d => d.User)
					.WithMany(p => p.SmsMessages)
					.HasForeignKey(d => d.UserId)
					.OnDelete(DeleteBehavior.ClientSetNull)
					.HasConstraintName("FK_Sms_User");

				entity.ToTable("SmsMessage");
			});

			modelBuilder.Entity<SmsStatus>(entity =>
			{

				//entity.Property(e => e.Name)
				//	.IsRequired()
				//	.HasMaxLength(100);

				//entity.Property(e => e.Ts)
				//	.HasColumnType("smalldatetime")
				//	.HasColumnName("TS");

				entity.HasOne(d => d.SmsMessage)
					.WithMany(p => p.SmsStatuses)
					.HasForeignKey(d => d.SmsId)
					.OnDelete(DeleteBehavior.ClientSetNull)
					.HasConstraintName("FK_SmsStatus_SmsMessage");

				entity.ToTable("SmsStatus");
			});

			modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(50);

                entity.Property(e => e.FirstName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.LastName)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.PasswordSalt)
                    .IsRequired()
                    .HasMaxLength(255);

                entity.Property(e => e.Ts)
                    .HasColumnType("smalldatetime")
                    .HasColumnName("TS");

                entity.ToTable("User");

            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}